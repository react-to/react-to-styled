name: release

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  GIT_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      #
      # Checkout the repository.
      #
      - uses: actions/checkout@v2
        id: checkout

      #
      # Cache files
      #
      - name: Cache
        uses: actions/cache@v2.1.6
        id: use-cache
        with:
          path: |
            node_modules/
            .eslintcache
            **/.cache
            packages/**/node_modules/
          key: ${{ github.ref }}-styled-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ github.ref }}-styled-

      #
      # Install dependencies and build the app
      #
      - name: Build components
        id: build-project
        run: yarn install --frozen-lockfile && yarn bootstrap && yarn build

  test:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      #
      # Checkout the repository.
      #
      - uses: actions/checkout@v2
        id: checkout

      #
      # Cache files
      #
      - name: Cache
        uses: actions/cache@v2.1.6
        id: cache
        with:
          path: |
            node_modules/
            .eslintcache
            **/.cache
            packages/**/node_modules/
          key: ${{ github.ref }}-styled-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ github.ref }}-styled-

      #
      # Run lint
      #
      - name: Lint
        id: lint
        run: NODE=production yarn lint

      #
      # Run type-check
      #
      - name: Typecheck
        id: typecheck
        run: yarn typecheck

  release:
    if: ${{ github.event_name != 'pull_request' }}
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      #
      # Checkout the repository.
      #
      - uses: actions/checkout@v2
        id: checkout
        with:
          token: ${{ secrets.GH_SECRET }}

      #
      # Set git identity to be a bot
      #
      - name: Cache
        uses: actions/cache@v2.1.6
        id: cache
        with:
          path: |
            node_modules/
            .eslintcache
            **/.cache
            packages/**/node_modules/
          key: ${{ github.ref }}-styled-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ github.ref }}-styled-

      #
      # Set git identity to be a bot
      #
      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '42103905+github-actions[bot]@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
          GITHUB_ACTOR: ${{ github.actor }}

      #
      # Publish release with lerna if not already published
      #
      - name: Create Release
        if: |
          env.GIT_COMMIT_MESSAGE &&
          !startsWith(env.GIT_COMMIT_MESSAGE, 'chore(release): Release') &&
          github.ref == 'refs/heads/main'
        run: lerna publish --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      #
      # Publish a prerelease with lerna if not already published
      #
      - name: Create prerelease
        if: |
          env.GIT_COMMIT_MESSAGE &&
          !startsWith(env.GIT_COMMIT_MESSAGE, 'chore(release): Release') &&
          github.ref == 'refs/heads/develop'
        run: lerna publish --yes --conventional-prerelease
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
